{"version":3,"sources":["layout/Main/index.js","modules/Main/index.tsx","serviceWorker.ts","config/goat.ts","index.tsx","modules/UI/stores/theme/ThemeStore.tsx","modules/UI/stores/theme/context.tsx","modules/UI/stores/theme/useThemeStore.tsx"],"names":["Dashboards","lazy","Widgets","Elements","Components","Charts","Forms","Tables","ResourceBuilder","AppMain","fallback","className","path","component","exact","render","to","Main","observer","themeStore","useThemeStore","useObserver","colorScheme","enableFixedHeader","enableFixedSidebar","enableFixedFooter","enableClosedSidebar","enableMobileMenu","closedSmallerSidebar","useThemeData","handleWidth","width","cx","withRouter","Boolean","window","location","hostname","match","BackendConnector","baseUrl","String","process","connector","Loopback","default","name","Fluent","config","LOCAL_CONNECTORS","MERGE_CONNECTORS","REMOTE_CONNECTORS","a","Component","rootElement","document","getElementById","App","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister","ThemeStore","types","model","drawerOpen","active","mobile","mobileSmall","activeSecondaryMenuMobile","openLeft","openRight","relativeWidth","noTouchOpen","noTouchClose","backgroundColor","headerBackgroundColor","enableMobileMenuSmall","enableBackgroundImage","enableHeaderShadow","enableSidebarShadow","backgroundImage","backgroundImageOpacity","enablePageTitleIcon","enablePageTitleSubheading","enablePageTabsAlt","actions","self","toggleDrawer","toggleMobileSidebar","toggleMobileSmall","toggleSecondaryMenuMobile","themeContext","React","createContext","create","useContext"],"mappings":"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","file":"static/js/main.5a37551a.chunk.js","sourcesContent":["/*eslint-disable */\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\nimport React, { Suspense, lazy, Fragment } from \"react\";\nimport { ToastContainer } from \"react-toastify\";\n\nconst Dashboards = lazy(() => import(\"../../modules/UI/Dashboards\"));\nconst Widgets = lazy(() => import(\"../../modules/UI/Widgets\"));\nconst Elements = lazy(() => import(\"../../modules/UI/Elements\"));\nconst Components = lazy(() => import(\"../../modules/UI/Components\"));\nconst Charts = lazy(() => import(\"../../modules/UI/Charts\"));\nconst Forms = lazy(() => import(\"../../modules/UI/Forms\"));\nconst Tables = lazy(() => import(\"../../modules/UI/Tables\"));\nconst ResourceBuilder = lazy(() => import(\"../../modules/Forms\"));\n\nconst AppMain = () => {\n  return (\n    <Fragment>\n      {/* Resources */}\n\n      <Suspense\n        fallback={\n          <div className=\"loader-container\">\n            <div className=\"loader-container-inner\">\n              <h6 className=\"mt-5\">\n                Loading...\n                <small>Wait for the resource builder to load</small>\n              </h6>\n            </div>\n          </div>\n        }\n      >\n        <Route path=\"/forms/:_id*\" component={ResourceBuilder} />\n      </Suspense>\n      {/* Components */}\n\n      <Suspense\n        fallback={\n          <div className=\"loader-container\">\n            <div className=\"loader-container-inner\">\n              <h6 className=\"mt-5\">\n                Please wait while we load all the Components examples\n                <small>\n                  Because this is a demonstration we load at once all the\n                  Components examples. This wouldn't happen in a real live app!\n                </small>\n              </h6>\n            </div>\n          </div>\n        }\n      >\n        <Route path=\"/components\" component={Components} />\n      </Suspense>\n\n      {/* Forms */}\n\n      <Suspense\n        fallback={\n          <div className=\"loader-container\">\n            <div className=\"loader-container-inner\">\n              <h6 className=\"mt-5\">\n                Please wait while we load all the Forms examples\n                <small>\n                  Because this is a demonstration we load at once all the Forms\n                  examples. This wouldn't happen in a real live app!\n                </small>\n              </h6>\n            </div>\n          </div>\n        }\n      >\n        <Route path=\"/formsui\" component={Forms} />\n      </Suspense>\n\n      {/* Charts */}\n\n      <Suspense\n        fallback={\n          <div className=\"loader-container\">\n            <div className=\"loader-container-inner\">\n              <h6 className=\"mt-3\">\n                Please wait while we load all the Charts examples\n                <small>\n                  Because this is a demonstration we load at once all the Charts\n                  examples. This wouldn't happen in a real live app!\n                </small>\n              </h6>\n            </div>\n          </div>\n        }\n      >\n        <Route path=\"/charts\" component={Charts} />\n      </Suspense>\n\n      {/* Tables */}\n\n      <Suspense\n        fallback={\n          <div className=\"loader-container\">\n            <div className=\"loader-container-inner\">\n              <h6 className=\"mt-5\">\n                Please wait while we load all the Tables examples\n                <small>\n                  Because this is a demonstration we load at once all the Tables\n                  examples. This wouldn't happen in a real live app!\n                </small>\n              </h6>\n            </div>\n          </div>\n        }\n      >\n        <Route path=\"/tables\" component={Tables} />\n      </Suspense>\n\n      {/* Elements */}\n\n      <Suspense\n        fallback={\n          <div className=\"loader-container\">\n            <div className=\"loader-container-inner\">\n              <h6 className=\"mt-3\">\n                Please wait while we load all the Elements examples\n                <small>\n                  Because this is a demonstration we load at once all the\n                  Elements examples. This wouldn't happen in a real live app!\n                </small>\n              </h6>\n            </div>\n          </div>\n        }\n      >\n        <Route path=\"/elements\" component={Elements} />\n      </Suspense>\n\n      {/* Dashboard Widgets */}\n\n      <Suspense\n        fallback={\n          <div className=\"loader-container\">\n            <div className=\"loader-container-inner\">\n              <h6 className=\"mt-3\">\n                Please wait while we load all the Dashboard Widgets examples\n                <small>\n                  Because this is a demonstration we load at once all the\n                  Dashboard Widgets examples. This wouldn't happen in a real\n                  live app!\n                </small>\n              </h6>\n            </div>\n          </div>\n        }\n      >\n        <Route path=\"/widgets\" component={Widgets} />\n      </Suspense>\n\n      {/* Dashboards */}\n\n      <Suspense\n        fallback={\n          <div className=\"loader-container\">\n            <div className=\"loader-container-inner\">\n              <h6 className=\"mt-3\">\n                Please wait while we load all the Dashboards examples\n                <small>\n                  Because this is a demonstration, we load at once all the\n                  Dashboards examples. This wouldn't happen in a real live app!\n                </small>\n              </h6>\n            </div>\n          </div>\n        }\n      >\n        <Route path=\"/dashboards\" component={Dashboards} />\n      </Suspense>\n\n      <Route\n        exact\n        path=\"/\"\n        render={() => <Redirect to=\"/dashboards/basic\" />}\n      />\n      <ToastContainer />\n    </Fragment>\n  );\n};\n\nexport default AppMain;\n","import React from \"react\";\nimport cx from \"classnames\";\nimport { withRouter } from \"react-router-dom\";\nimport ResizeDetector from \"react-resize-detector\";\nimport AppMain from \"../../layout/Main\";\n\nimport { useThemeStore } from \"../UI/stores/theme/useThemeStore\";\nimport { observer, useObserver } from \"mobx-react\";\n\nconst useThemeData = () => {\n  const { themeStore } = useThemeStore();\n  return useObserver(() => ({\n    colorScheme: themeStore.colorScheme,\n    enableFixedHeader: themeStore.enableFixedHeader,\n    enableFixedSidebar: themeStore.enableFixedSidebar,\n    enableFixedFooter: themeStore.enableFixedFooter,\n    enableClosedSidebar: themeStore.enableClosedSidebar,\n    enableMobileMenu: themeStore.enableMobileMenu,\n    closedSmallerSidebar: themeStore.closedSmallerSidebar\n  }));\n};\n\nconst Main = observer(() => {\n  let {\n    colorScheme,\n    enableFixedHeader,\n    enableFixedSidebar,\n    enableFixedFooter,\n    enableClosedSidebar,\n    enableMobileMenu,\n    closedSmallerSidebar\n  } = useThemeData();\n\n  return (\n    <ResizeDetector\n      handleWidth\n      render={({ width }) => (\n        <div\n          className={cx(\n            \"app-container app-theme-\" + colorScheme,\n            { \"fixed-header\": enableFixedHeader },\n            { \"fixed-sidebar\": enableFixedSidebar || width < 1250 },\n            { \"fixed-footer\": enableFixedFooter },\n            { \"closed-sidebar\": enableClosedSidebar || width < 1250 },\n            {\n              \"closed-sidebar-mobile\": closedSmallerSidebar || width < 1250\n            },\n            { \"sidebar-mobile-open\": enableMobileMenu }\n          )}\n        >\n          <AppMain />\n        </div>\n      )}\n    />\n  );\n});\n\nexport default withRouter(Main);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Fluent } from \"@goatlab/fluent\";\nimport { Loopback } from \"@goatlab/fluent/dist/Providers/Loopback/LoopbackConnector\";\n\nconst BackendConnector = {\n  baseUrl: String(process.env.REACT_APP_FLUENT_BASE_URL),\n  connector: Loopback,\n  default: true,\n  name: \"backend\"\n};\n\nnew Fluent().config({\n  LOCAL_CONNECTORS: [],\n  MERGE_CONNECTORS: [],\n  REMOTE_CONNECTORS: [BackendConnector]\n});\n\nexport const config = async () => {\n  /*\n    const { config, translations } = await GOAT.start({\n    appConf: initialConfig\n  });\n  */\n};\n","import React, { ComponentClass } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/base.css\";\nimport App from \"./modules/Main\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { config } from \"./config/goat\";\nimport { HashRouter } from \"react-router-dom\";\nimport \"./styles.scss\";\nconfig();\nconst rootElement = document.getElementById(\"root\");\n\nconst renderApp = (Component: ComponentClass) => {\n  ReactDOM.render(\n    <HashRouter>\n      <Component />\n    </HashRouter>,\n    rootElement\n  );\n};\n\nrenderApp(App);\n\nif (module.hot) {\n  module.hot.accept(\"./_Router\", () => {\n    const NextApp = require(\"./_Router\").default;\n    renderApp(NextApp);\n  });\n}\nserviceWorker.unregister();\n","import { types } from \"mobx-state-tree\";\n\nexport const ThemeStore = types\n  .model(\"ThemeStore\", {\n    drawerOpen: false,\n    active: false,\n    mobile: false,\n    mobileSmall: true,\n    activeSecondaryMenuMobile: true,\n    openLeft: false,\n    openRight: false,\n    relativeWidth: false,\n    width: 280,\n    noTouchOpen: false,\n    noTouchClose: false,\n    enableClosedSidebar: false,\n    enableFixedHeader: true,\n    enableFixedFooter: true,\n    enableFixedSidebar: true,\n    colorScheme: \"white\",\n    enableMobileMenu: false,\n    closedSmallerSidebar: false,\n    backgroundColor: \"bg-goat sidebar-text-light\",\n    headerBackgroundColor: \"bg-goat header-text-light\",\n    enableMobileMenuSmall: \"\",\n    enableBackgroundImage: true,\n    enableHeaderShadow: true,\n    enableSidebarShadow: true,\n    backgroundImage: \"\",\n    backgroundImageOpacity: \"opacity-06\",\n    enablePageTitleIcon: true,\n    enablePageTitleSubheading: true,\n    enablePageTabsAlt: false\n  })\n  .actions(self => ({\n    toggleDrawer() {\n      self.drawerOpen = !self.drawerOpen;\n      self.enableClosedSidebar = !self.enableClosedSidebar;\n    },\n    toggleMobileSidebar() {\n      self.mobile = !self.mobile;\n    },\n    toggleMobileSmall() {\n      self.mobileSmall = !self.mobileSmall;\n    },\n    toggleSecondaryMenuMobile() {\n      self.activeSecondaryMenuMobile = !self.activeSecondaryMenuMobile;\n    }\n  }));\n","import React from \"react\";\nimport { ThemeStore } from \"./ThemeStore\";\n\nexport const themeContext = React.createContext({\n  themeStore: ThemeStore.create()\n});\n","import React from \"react\";\nimport { themeContext } from \"./context\";\n\nexport const useThemeStore = () => React.useContext(themeContext);\n"],"sourceRoot":""}